using System;
using System.Buffers.Text;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using Assets.Scripts.Networking;
using Newtonsoft.Json;
using UnityEngine;
using UnityEngine.UI;

public class BayesGridController : MonoBehaviour
{

    public GameObject GridParent;
    public GameObject GridCellPrefab;
    public Gradient BayesGradient;

    private List<GameObject> gridChildren = new List<GameObject>();
    
    // Start is called before the first frame update
    void Start()
    {
        
        /*
        // Initialize the gradient
        GradientColorKey[] colorKey = new GradientColorKey[3];
        GradientAlphaKey[] alphaKey = new GradientAlphaKey[3];

        // Define color keys
        colorKey[0].color = Color.white;
        colorKey[0].time = 0.0f; // At the start of the gradient

        colorKey[1].color = Color.yellow;
        colorKey[1].time = 0.5f; // In the middle of the gradient

        colorKey[2].color = Color.red;
        colorKey[2].time = 1.0f; // At the end of the gradient

        // Define alpha keys
        alphaKey[0].alpha = 1.0f;
        alphaKey[0].time = 0.0f;

        alphaKey[1].alpha = 1.0f;
        alphaKey[1].time = 0.5f;

        alphaKey[2].alpha = 1.0f;
        alphaKey[2].time = 1.0f;

        // Set the keys to the gradient
        BayesGradient.SetKeys(colorKey, alphaKey);
        */
        
        ///Get the test grid
        string testData = Encoding.UTF8.GetString(Convert.FromBase64String(
            "W1swLjAwNDQ5ODg4NjQxNDI1Mzg5NjUsIDAuMDAyMDA0NDU0MzQyOTg0NDA5LCAwLjAwNDQ5ODg4NjQxNDI1Mzg5NjUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODVdLCBbMC4wMDQ0OTg4ODY0MTQyNTM4OTY1LCAwLjAwNDQ5ODg4NjQxNDI1Mzg5NjUsIDAuMDA0NDk4ODg2NDE0MjUzODk2NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NV0sIFswLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1XSwgWzAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODVdLCBbMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NV0sIFswLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1XSwgWzAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODVdLCBbMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NV0sIFswLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1XSwgWzAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODVdLCBbMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NV0sIFswLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1XSwgWzAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODVdLCBbMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NV0sIFswLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1LCAwLjAwNDQ1NDM0Mjk4NDQwOTc5ODUsIDAuMDA0NDU0MzQyOTg0NDA5Nzk4NSwgMC4wMDQ0NTQzNDI5ODQ0MDk3OTg1XV0K"));
        //UpdateBayes(testData);
    }
    
    // Function to get a color from the gradient
    public Color GetColorFromGradient(float value)
    {
        // Ensure the value is within the range [0, 1]
        value = Mathf.Clamp01(value);

        // Evaluate the gradient at this value
        return BayesGradient.Evaluate(value);
    }

    public void UpdateBayes(string dataString)
    {
        
        //Destroy the children
        foreach(GameObject child in gridChildren)
        {
            DestroyImmediate(child);
        }
        
        gridChildren = new List<GameObject>();
        
        // Deserialize the JSON string into a two-dimensional array
        float[][] data = JsonConvert.DeserializeObject<float[][]>(dataString);

        // Check if data is not null and has elements
        if (data != null)
        {
            // Reverse the array to start from the top left
            Array.Reverse(data);
            
            // Find the max and min values in the dataset
            float maxValue = float.MinValue;
            float minValue = float.MaxValue;
            foreach (var row in data)
            {
                foreach (var val in row)
                {
                    if (val > maxValue) maxValue = val;
                    if (val < minValue) minValue = val;
                }
            }
            
            float range = maxValue - minValue;

            for (int i = 0; i < data.Length; i++)
            {
                for (int j = 0; j < data[i].Length; j++)
                {
                    // Instantiate a new Grid Cell for each element
                    GameObject cell = Instantiate(GridCellPrefab, new Vector3(j, -i, 0), Quaternion.identity, GridParent.transform);
                    
                    //Add to cell
                    gridChildren.Add(cell);
                    
                    float normalizedValue = (data[i][j] - minValue) / (maxValue - minValue); //(1f / 15f) * j;
                    Color cellColor = GetColorFromGradient(normalizedValue);
                    cellColor.a = 0.6f;
                    
                    // Assuming the GridCellPrefab has an Image component
                    Image cellImage = cell.GetComponent<Image>();
                    if (cellImage != null)
                    {
                        cellImage.color = cellColor;
                    }
                }
            }
        }
    }
    

    // Update is called once per frame
    void Update()
    {
        
    }
}
